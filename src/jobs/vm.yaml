description: >
  This job deploys services on VM over internet or through VPN.

executor: default

parameters:
  service:
    type: string
    description: >
      Application service to deploy.
  env:
    type: enum
    default: "production"
    enum: [ "staging", "preprod", "production" ]
    description: >
      Running environment.
  repository:
    type: string
    description: >
      Name of the repository hosting deployment scripts.
      It automaticatlly and only uses GitHub repositories.
  deploy_key:
    type: string
    description: >
      Fingerprint of the SSH key use to deploy on servers.
  deploy_tool:
    type: enum
    default: "deployer"
    enum: [ "ansible", "deployer" ]
    description: >
      Define the tool / framework to use to deploy the service.
  use_vpn:
    type: boolean
    default: true
    description: >
      Whether to connect to VPN for OnPrem deployments.
  vpn_config:
    type: env_var_name
    default: "VPN_CLIENT_CONFIG"
    description: >
      OpenVPN configuration file content encoded in base64.
  vpn_username:
    type: env_var_name
    default: "VPN_USERNAME"
    description: >
      Username of service account used for VPN connection.
  vpn_password:
    type: env_var_name
    default: "VPN_PASSWORD"
    description: >
      Password of service account used for VPN connection.
  vpn_connection_waiting_time:
    type: integer
    default: 20
    description: >
      Time in second the jobs must wait to ensure the VPN connection is etablised.
  pattern:
    type: string
    default: release\/v?(([0-9]+\.?){1,3})(\-[a-zA-Z0-9\-\._]*)?
    description: >
      Regex pattern of the branch used to extract version number.
      VERSION file will be updated using this value.
  version_file:
    type: string
    default: "VERSION"
    description: >
      Name of the file that handles the current service version number.
  create_git_tag:
    type: boolean
    default: true
    description: >
      Whether to create git tag after successful production deployments.
      The value of the tag is get from VERSION file content.
  git_email:
    type: env_var_name
    default: "GIT_USER_EMAIL"
    description: >
      Name of the environment variable for the email of
      Git user used to push the new tag.
  git_user:
    type: env_var_name
    default: "GIT_USER_NAME"
    description: >
      Name of the environment variable for the user name of
      Git user used to push the new tag.
  docker_compose_version:
    type: string
    default: "1.27.4"
    description: >
      Version of Docker Compose to use for deployment environment files.

steps:
  - run:
      name: Add GitHub SSH config
      command: echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  - when:
      condition:
        equal: [ ansible, << parameters.deploy_tool >> ]
      steps:
        - run:
            name: Install Ansible
            command: |
              pip install --upgrade pip
              pip install ansible
  - when:
      condition:
        equal: [ deployer, << parameters.deploy_tool >> ]
      steps:
        - run:
            name: Install Docker Compose
            command: |
              curl -L https://github.com/docker/compose/releases/download/<< parameters.docker_compose_version >>/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
              chmod +x ~/docker-compose
              sudo mv ~/docker-compose /usr/local/bin/docker-compose
  - when:
      condition:
        or:
          - equal: [ staging, << parameters.env >> ]
          - equal: [ preprod, << parameters.env >> ]
      steps:
        - update-version:
            pattern: << parameters.pattern >>
            version_file: << parameters.version_file >>
            git_email: <<parameters.git_email >>
            git_user: << parameters.git_user >>
  - when:
      condition: << parameters.use_vpn >>
      steps:
        - vpn-connect:
            vpn_config: << parameters.vpn_config >>
            vpn_username: << parameters.vpn_username >>
            vpn_password: << parameters.vpn_password >>
            vpn_connection_waiting_time: << parameters.vpn_connection_waiting_time >>
  - add_ssh_keys:
      fingerprints:
        - "<< parameters.deploy_key >>"
  - run:
      name: Clone << parameters.repository >> repository
      working_directory: ~
      command: git clone git@github.com:cospirit/<< parameters.repository >>.git deployment
  - when:
      condition:
        and:
          - equal: [ staging, << parameters.env >>]
          - equal: [ ansible, << parameters.deploy_tool >> ]
      steps:
        - run:
            name: Update version in service configuration
            working_directory: deployment/ansible/<< parameters.service >>/hosts/host_vars
            environment:
              DEPLOY_CONF_FILE: << parameters.service >>_<< parameters.env >>.yml # ex: app_production.yml
              BRANCH_PATTERN: << parameters.pattern >>
            command: << include(scripts/ansible_update_branch.sh) >>
  - run:
      name: Deploy service << parameters.service >>
      working_directory: deployment
      command: make << parameters.env >>@deploy.<< parameters.service >>
  - when:
      condition: << parameters.use_vpn >>
      steps:
        - vpn-disconnect
  - when:
      condition:
        and:
          - << parameters.create_git_tag >>
          - equal: [ production, << parameters.env >> ]
      steps:
        - run:
            name: Move to fresh directory
            command: |
              mkdir "~/$CIRCLE_PROJECT_REPONAME"
              cd "~/$CIRCLE_PROJECT_REPONAME"
        - git-tag:
            version_file: << parameters.version_file >>
            git_email: <<parameters.git_email >>
            git_user: << parameters.git_user >>
